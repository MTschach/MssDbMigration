/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'jacoco'

apply from: 'https://raw.githubusercontent.com/MTschach/MssUtils/master/deploy.gradle'

apply from: 'https://raw.githubusercontent.com/MTschach/MssUtils/master/artifactory.gradle'

apply from: 'https://raw.githubusercontent.com/MTschach/MssUtils/master/eclipse.gradle'

def artifact = new Properties()
artifact.load(new FileInputStream("${project.projectDir}${File.separator}deploy.settings"))

buildscript {
   apply from: 'https://raw.githubusercontent.com/MTschach/MssUtils/master/buildscript.gradle'
}

apply plugin: "name.remal.module-info-generator"

version = artifact.version

defaultTasks 'build'

sourceSets {
   main {
      java {
         srcDir 'src'
      }
   }
   test {
      java {
         srcDir 'test'
      }
   }
}


dependencies {
   implementation       group: 'Mss'                                          , name: 'MssUtils'                        , version: 'latest.release'
   implementation       group: 'Mss'                                          , name: 'MssConfigTools'                  , version: 'latest.release'
   implementation       group: 'org.apache.logging.log4j'                     , name: 'log4j-core'                      , version: "${loggingVersion}"
   implementation       group: 'org.apache.logging.log4j'                     , name: 'log4j-api'                       , version: "${loggingVersion}"
   implementation       group: 'org.flywaydb'                                 , name: 'flyway-core'                     , version: "${flywayVersion}"


   testImplementation   group: 'org.junit.jupiter'                            , name: 'junit-jupiter-engine'            , version: "${junitVersion}"
   testImplementation   group: 'org.powermock'                                , name: 'powermock-module-junit4'         , version: "${powerMockVersion}"
   testImplementation   group: 'org.powermock'                                , name: 'powermock-api-easymock'          , version: "${powerMockVersion}"
   testImplementation   group: 'mysql'                                        , name: 'mysql-connector-java'            , version: "${mysqlConnectorVersion}"
   testImplementation   group: 'org.xerial'                                   , name: 'sqlite-jdbc'                     , version: "${sqliteVersion}"
}



jacocoTestReport {
   dependsOn test
   reports {
      xml.required = true
   }
}

test {
    useJUnitPlatform()
}


tasks.generateModuleInfo {
   moduleName = 'mss.dbmigration'
   exports {
      includes.add('de.mss.db.migration')
   }
}
